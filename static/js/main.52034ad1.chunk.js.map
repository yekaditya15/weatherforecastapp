{"version":3,"sources":["apiKeys.js","images/WeatherIcons.gif","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","process","base","Forcast","props","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","className","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","alt","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","floor","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52034ad1.chunk.js","sourcesContent":["\nmodule.exports = {\n  key: process.env.REACT_APP_KEY,\n  base: process.env.REACT_APP_BASE,\n};\n","module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect } from \"react\"; // Import necessary React components and hooks\nimport axios from \"axios\"; // Import Axios for making HTTP requests\nimport apiKeys from \"./apiKeys\"; // Import API keys and base URL\nimport ReactAnimatedWeather from \"react-animated-weather\"; // Import a weather icon component\n\nfunction Forcast(props) { // Define a React functional component named Forcast and accept props as an argument\n  const [query, setQuery] = useState(\"\"); // State: query stores user's input for the city\n  const [error, setError] = useState(\"\"); // State: error stores error messages\n  const [weather, setWeather] = useState({}); // State: weather stores weather data\n\n  const search = (city) => { // Define a function to search for weather data\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      ) // Make an API request to fetch weather data\n      .then((response) => {\n        setWeather(response.data); // Set the weather state with the API response data\n        setQuery(\"\"); // Clear the query state\n      })\n      .catch(function (error) {\n        console.log(error); // Log any errors\n        setWeather(\"\"); // Clear the weather state\n        setQuery(\"\"); // Clear the query state\n        setError({ message: \"Not Found\", query: query }); // Set an error message\n      });\n  };\n\n\n\n  const defaults = { // Define default values for the weather icon\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Delhi\"); // Use the useEffect hook to trigger the initial weather search for Delhi\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon} // Display the weather icon based on props\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)} // Update the query state with user input\n            value={query} // Bind the input value to the query state\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\" alt=\" \"\n              onClick={search} // Trigger the search function on click\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main !== \"undefined\" ? ( // Conditionally render weather information or an error message\n            <div>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country} \n                </p>\n                <img\n                  className=\"temp\" alt=\" \"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`} // Display a weather icon\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c \n                </span>\n              </li>\n              <li>\n                Weather{\" \"}\n                <span className=\"temp\">\n                  {weather.weather[0].main} \n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi \n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h \n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message} \n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.floor(data.main.temp),\n      temperatureF: Math.floor(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader}  alt=\" \"  style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\nimport { log } from \"util\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n       \n        Developed by Yekaditya Devadi |  WeatherApplication\n     \n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}